from cv2 import *
import numpy as np
import sys

def rgbfilter(image):
    #"Fire Detection Using Statistical Color Model in Video Sequences" by Turgay Celik, Hasan Demeril, Huseyin Ozkaramanli, Mustafa Uygurogl"
    #red > green > blue
    #red > red threshold (depends on amount of light in image)
    b,g,r = split(image)
    rt = 220
    gb = compare(g,b,CMP_GT)
    rg = compare(r,g,CMP_GT)
    rrt = compare(r,rt,CMP_GT)
    rgb = bitwise_and(rg,gb) 
    return bitwise_and(rgb,rrt)

def rgbfilter2(image):
    #This is a simple threshold filter with experimental thresholds:
    #r > rt (red threshold)
    #g > gt (green threshold)
    #b < bt (blue threshold)
    #Night: rt = 0, gt = 100, bt = 140
    b,g,r = split(image)
    rt = 0
    gt = 100
    bt = 140
    ggt = compare(g,gt,CMP_GT)
    bbt = compare(b,bt,CMP_LT)
    rrt = compare(r,rt,CMP_GT)
    rgb = bitwise_and(ggt,bbt)  
    return bitwise_and(rgb,rrt)

def labfilter(image):
    #This is a filter based on a method proposed in "Fast and Efficient Method for Fire Detection Using Image Processing" by Turgay Celik
    #This method uses the CIE L*a*b* color space and performs 4 bitwise filters
    #The method returns true at any pixel that satisfies:
    #L* > Lm* (mean of L* values)
    #a* > am* (mean of a* values)
    #b* > bm* (mean of b* values)
    #b* > a*
    cieLab = cvtColor(image,COLOR_BGR2LAB)
    L,a,b = cv2.split(cieLab)
    Lm = mean(L)
    am = mean(a)
    bm = mean(b)
    R1 = compare(L,Lm,CMP_GT)
    R2 = compare(a,am,CMP_GT)
    R3 = compare(b,bm,CMP_GT)
    R4 = compare(b,a,CMP_GT)
    R12 = bitwise_and(R1,R2)
    R34 = bitwise_and(R3,R4)   
    return bitwise_and(R12,R34)

video_file = input("Input video file name : ")
video = cv2.VideoCapture(video_file)
Type = input("Which Type You want to use(1.RGB(accurate) , 2.RGB threshold night mode, 3. 4 bitwise filter) : ")
while True:
    (grabbed, frame) = video.read()
    if not grabbed:
        break
    blur = cv2.GaussianBlur(frame, (21, 21), 0)
    hsv = cv2.cvtColor(blur, cv2.COLOR_BGR2HSV)
    if(Type=='1'):
        output = rgbfilter(hsv)
    elif(Type=='2'):
        output = rgbfilter2(hsv)
    elif(Type=='3'):
        output = labfilter(hsv)
    cv2.imshow("output", output)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cv2.destroyAllWindows()
video.release()